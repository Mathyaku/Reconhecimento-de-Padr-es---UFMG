source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/script.r')
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/script.r')
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/script.r')
epoch <- seq(1,30,1)
epoch
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/script.r')
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/script.r')
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/script.r')
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/script.r')
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/script.r')
predict
BreastCancer$Class
Y <- as.numeric(BreastCancer$Class)
Y
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/script.r')
createFolds
help(createFolds)
help(createFolds)
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/script.r')
help(createFolds)
createFolds(1, k = 10)
rm(list=ls())
if (!require("rgl")) install.packages("rgl")
library('rgl')
if (!require("mlbench")) install.packages("mlbench")
library('mlbench')
if (!require("caret")) install.packages("caret")
library('caret')
knn <- function (point,trainX,trainY)
{
matrixAux <- rbind(point,trainX)
distance <- as.matrix(dist(matrixAux, method = "euclidean"))
distanceArray <- as.array(order(distance[1,]))
nearest <- distanceArray[1:K+1]
nPositive <- length(which(trainY[nearest-1] == 1))
nNegative <- length(which(trainY[nearest-1] == -1))
if(nPositive > nNegative)
predict <- 1
else if (nNegative > nPositive)
predict <- -1
else
predict <- 1
return(predict)
}
data(BreastCancer)
summary(BreastCancer)
n <- 50
epoch <- seq(1,n,1)
mean <- array(0, n)
sd <- array(0, n)
X <- data.matrix(BreastCancer[,2:10])
X[is.na(X)] <- 0
Y <- as.numeric(BreastCancer$Class)
Y[which( Y == 2)] <- -1
partition <- sort(sample(nrow(X), nrow(X)*0.7))
trainX<-X[partition,]
trainY<-Y[partition]
testY <- Y[-partition]
testX <- X[-partition,]
length(trainX)
dim(trainX)
dim(trainX)[1]
createFolds(trainX, k = 10)
partition
createFolds(partition, k = 10)
rm(list=ls())
if (!require("rgl")) install.packages("rgl")
library('rgl')
if (!require("mlbench")) install.packages("mlbench")
library('mlbench')
if (!require("caret")) install.packages("caret")
library('caret')
knn <- function (point,trainX,trainY)
{
matrixAux <- rbind(point,trainX)
distance <- as.matrix(dist(matrixAux, method = "euclidean"))
distanceArray <- as.array(order(distance[1,]))
nearest <- distanceArray[1:K+1]
nPositive <- length(which(trainY[nearest-1] == 1))
nNegative <- length(which(trainY[nearest-1] == -1))
if(nPositive > nNegative)
predict <- 1
else if (nNegative > nPositive)
predict <- -1
else
predict <- 1
return(predict)
}
data(BreastCancer)
summary(BreastCancer)
n <- 50
epoch <- seq(1,n,1)
mean <- array(0, n)
sd <- array(0, n)
X <- data.matrix(BreastCancer[,2:10])
X[is.na(X)] <- 0
Y <- as.numeric(BreastCancer$Class)
Y[which( Y == 2)] <- -1
partition <- sort(sample(nrow(X), nrow(X)*0.7))
trainX<-X[partition,]
trainY<-Y[partition]
testY <- Y[-partition]
testX <- X[-partition,]
listOfFolds <- createFolds(partition, k = 10)
createFolds(partition, k = 10)listOfFolds
listOfFolds
listOfFolds$Fold01
listOfFolds[[1]]
listOfFolds[[0]]
listOfFolds[[2]]
which(1:kFolds != 1)
kFolds <- 10
which(1:kFolds != 1)
for(i in 1:kFolds)
{
trainIndexes <- listOfFolds[[which(1:kFolds != is)]]
}
i <- 1
trainIndexes <- listOfFolds[[which(1:kFolds != i)]]
print(trainIndexes)
trainIndexes <- listOfFolds[[which(1:kFolds != i)]]
print(trainIndexes)
listOfFolds[[which(1:kFolds != i)]]
which(1:kFolds != i)
listOfFolds
listOfFolds[[which(1:kFolds != i)]]
listOfFolds[[1:2]]
listOfFolds[[c(1,2)]]
listOfFolds[[c(1,2,3)]]
as.array(listOfFolds[[which(1:kFolds != i)]])
which(1:kFolds != i)
listOfFolds[1]
as.array(listOfFolds[1])
for(itrain in which(1:kFolds != i))
{
trainIndexes <- cbind(trainIndexes,listOfFolds[1]v)
}
for(itrain in which(1:kFolds != i))
{
trainIndexes <- cbind(trainIndexes,listOfFolds[1])
}
trainIndexes <- array(0,0)
trainIndexes
trainIndexes <- array(0,0)
for(itrain in which(1:kFolds != i))
{
trainIndexes <- cbind(trainIndexes,listOfFolds[1])
}
trainIndexes
trainIndexes <- array(0,0)
for(itrain in which(1:kFolds != i))
{
trainIndexes <- cbind(trainIndexes,listOfFolds[[1]])
}
trainIndexes
listOfFolds[[1]]
cbind(listOfFolds[[1]],listOfFolds[[2]])
rbind(listOfFolds[[1]],listOfFolds[[2]])
rbind(as.array(listOfFolds[[1]]),as.array(listOfFolds[[2]]))
rbind(as.array(listOfFolds[[1]]),as.array(listOfFolds[[2]]))
listOfFolds[[1]]
x <- listOfFolds[[1]]
x1 <- listOfFolds[[1]]
x2 <- listOfFolds[[2]]
x3 <- c(x1,x3)
x3 <- rbind(x1,x3)
x3 <- c(x1,x3)
c(x1,x3)
c(x1,x2)
trainIndexes <- array(0,0)
for(itrain in which(1:kFolds != i))
{
trainIndexes <- c(trainIndexes,listOfFolds[[itrain]])
}
trainIndexes
order(trainIndexes)
order(trainIndexes)
trainIndexes
for(i in 1:kFolds)
{
trainIndexes <- array(0,0)
for(itrain in which(1:kFolds != i))
{
trainIndexes <- c(trainIndexes,listOfFolds[[itrain]])
}
testIndexes <- listOfFolds[[i]]
}
length(testIndexes)
length(trainIndexes)
441+48
trainIndexes == testIndexes[1]
1*(trainIndexes == testIndexes[1])
sum(1*(trainIndexes == testIndexes[1]))
kFolds
meanKfold <- array(0,kFolds-1)
sdKfold <- array(0,kFolds-1)
c(1,2,3)
which(max(c(1,2,3)))
which(c(1,2,3) == max(c(1,2,3)))
which(c(1,2,5) == max(c(1,2,5)))
which(c(1,10,5) == max(c(1,10,5)))
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
knnVariation
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
(which(meanKfold) == max(meanKfold))
meanKfold
sdKfold
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
meanKfold
predict
testYfolds
(sum(1*(predict == testYfolds))/length(testYfolds))
meanKfold
kFolds
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
sdKfold
meanKfold
(which(meanKfold) == max(meanKfold))
meanKfold
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
knnVariation
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
meanKfold
meanKfold
i in 1:kFolds
1:kFolds
for(i in 1:kFolds)
{
meanKfold <- array(0,kFolds-1)
sdKfold <- array(0,kFolds-1)
trainIndexes <- array(0,0)
for(itrain in which(1:kFolds != i))
{
trainIndexes <- c(trainIndexes,listOfFolds[[itrain]])
}
testIndexes <- listOfFolds[[i]]
trainXfolds<-X[trainIndexes,]
trainYfolds<-Y[trainIndexes]
testXfolds<-X[testIndexes,]
testYfolds<-Y[testIndexes]
predict <- array(0,length(testYfolds))
K <- kVariation
for(j in 1:dim(testXfolds)[1]){
predict[j] <- knn(testXfolds[j,],trainXfolds,testYfolds)
}
meanKfold[i] <- (sum(1*(predict == testYfolds))/length(testYfolds))
sdKfold[i] <- sd(predict)
}
meanKfold
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
sdKfold
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
sdKfold
sd(predict)
meanKfold
meanKfold <- array(0,kFolds-1)
sdKfold <- array(0,kFolds-1)
for(i in 1:kFolds)
{
trainIndexes <- array(0,0)
for(itrain in which(1:kFolds != i))
{
trainIndexes <- c(trainIndexes,listOfFolds[[itrain]])
}
testIndexes <- listOfFolds[[i]]
trainXfolds<-X[trainIndexes,]
trainYfolds<-Y[trainIndexes]
testXfolds<-X[testIndexes,]
testYfolds<-Y[testIndexes]
predict <- array(0,length(testYfolds))
K <- kVariation
for(j in 1:dim(testXfolds)[1]){
predict[j] <- knn(testXfolds[j,],trainXfolds,testYfolds)
}
print(i)
print(sd(predict))
meanKfold[i] <- (sum(1*(predict == testYfolds))/length(testYfolds))
sdKfold[i] <- sd(predict)
}
sdKfold
iBest <- which(meanKfold == max(meanKfold))
iBest
sdKfold
meanKfold
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
meanKfold
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
sd
1:knnVariation
knnVariation
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
predict
testYfolds
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
iBest
meanKfold
sd
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
i
mean
sd
kVariation
mean[kVariation]
mean[2]
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
kVariation
iBest
sdKfold
iBest
which(array != 2)
which(c(1:10) != 2)
meanKfold
which(meanKfold == max(meanKfold))
max(meanKfold)
which.is.max(meanKfold)
which.max(meanKfold)
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
kVariation
sd[kVariation]
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
testYfolds
testYfolds+predict
predict-testYfolds
[i]
predict
(sum(1*(predict == testYfolds))/length(testYfolds))
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
partition
1:1000
1:10
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
install.packages("class")
install.packages("class")
install.packages("class")
aa
install.packages("class")
library('class')
help(knn)
trainYfolds
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
knn(trainXfolds,testXfolds,trainYfolds,kVariation)
predict <- knn(trainXfolds,testXfolds,trainYfolds,kVariation)
predict
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
bestK
list('acc':1)
teste <- list("acc" = 1)
teste$acc
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
result
e in 1:30
for(epoch in 1:30)
result[epoch] <- findBestK(30, X, Y, 10)
result
result[[1]]
nepoch < 30
result <- array(list(), nepoch)
nepoch <- 30
result <- array(list(), nepoch)
result
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
result
result[[1]]
findBestK(30, X, Y, 10)
x<- findBestK(30, X, Y, 10)
x
list()
nepoch <- 3
result <- list()
for(epoch in 1:nepoch)
result[epoch] <- findBestK(30, X, Y, 10)
list(list())
result[[1]]
result[[2]]
result <- list(list())
nepoch <- 3
result <- list(list())
for(epoch in 1:nepoch){
result[epoch] <- findBestK(30, X, Y, 10)
}
result
nepoch <- 3
result <- list()
for(epoch in 1:nepoch){
result[epoch] <- findBestK(30, X, Y, 10)
}
result
nepoch <- 3
result <- list()
for(epoch in 1:nepoch){
result[[epoch]] <- findBestK(30, X, Y, 10)
}
result
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
result
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões/Aula 15/findBestK.r')
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões - Github/Aula 15 - KFOLD/findBestK.r')
source('C:/Users/Matheus/Desktop/Reconhecimentos de Padrões - Github/Aula 15 - KFOLD/script.r')
